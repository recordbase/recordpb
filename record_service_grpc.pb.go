// Copyright (c) 2022-2023, Zander Schwid & Co. LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: record_service.proto

package recordpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RecordService_GetCounts_FullMethodName      = "/recordbase.RecordService/GetCounts"
	RecordService_Lookup_FullMethodName         = "/recordbase.RecordService/Lookup"
	RecordService_Search_FullMethodName         = "/recordbase.RecordService/Search"
	RecordService_Get_FullMethodName            = "/recordbase.RecordService/Get"
	RecordService_Create_FullMethodName         = "/recordbase.RecordService/Create"
	RecordService_Delete_FullMethodName         = "/recordbase.RecordService/Delete"
	RecordService_Update_FullMethodName         = "/recordbase.RecordService/Update"
	RecordService_Scan_FullMethodName           = "/recordbase.RecordService/Scan"
	RecordService_AddKeyRange_FullMethodName    = "/recordbase.RecordService/AddKeyRange"
	RecordService_GetKeyCapacity_FullMethodName = "/recordbase.RecordService/GetKeyCapacity"
	RecordService_MapGet_FullMethodName         = "/recordbase.RecordService/MapGet"
	RecordService_MapPut_FullMethodName         = "/recordbase.RecordService/MapPut"
	RecordService_MapRemove_FullMethodName      = "/recordbase.RecordService/MapRemove"
	RecordService_MapRange_FullMethodName       = "/recordbase.RecordService/MapRange"
)

// RecordServiceClient is the client API for RecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordServiceClient interface {
	//
	// Gets attributes counts
	//
	GetCounts(ctx context.Context, in *TenantRequest, opts ...grpc.CallOption) (*Counts, error)
	//
	// Quick record lookup request
	//
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*RecordEntry, error)
	//
	// Search records by indexed attributes
	//
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (RecordService_SearchClient, error)
	//
	// Get record with all attributes
	//
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*RecordEntry, error)
	//
	// Create record with new primary_key
	//
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	//
	// Delete record
	//
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// Update record attributes
	//
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// Scan records
	//
	Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (RecordService_ScanClient, error)
	//
	// Allocate primary key range
	//
	AddKeyRange(ctx context.Context, in *KeyRange, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	// Gets primary keys capacity
	//
	GetKeyCapacity(ctx context.Context, in *TenantRequest, opts ...grpc.CallOption) (*KeyCapacity, error)
	//
	// Get map value associated with the record
	//
	MapGet(ctx context.Context, in *MapGetRequest, opts ...grpc.CallOption) (*MapEntry, error)
	//
	// Put map value associated with the record. Returns old value.
	//
	MapPut(ctx context.Context, in *MapPutRequest, opts ...grpc.CallOption) (*MapValue, error)
	//
	// Remove map value associated with the record. Returns old value.
	//
	MapRemove(ctx context.Context, in *MapRemoveRequest, opts ...grpc.CallOption) (*MapValue, error)
	//
	// Scan all map key-value pairs
	//
	MapRange(ctx context.Context, in *MapRangeRequest, opts ...grpc.CallOption) (RecordService_MapRangeClient, error)
}

type recordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordServiceClient(cc grpc.ClientConnInterface) RecordServiceClient {
	return &recordServiceClient{cc}
}

func (c *recordServiceClient) GetCounts(ctx context.Context, in *TenantRequest, opts ...grpc.CallOption) (*Counts, error) {
	out := new(Counts)
	err := c.cc.Invoke(ctx, RecordService_GetCounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*RecordEntry, error) {
	out := new(RecordEntry)
	err := c.cc.Invoke(ctx, RecordService_Lookup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (RecordService_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &RecordService_ServiceDesc.Streams[0], RecordService_Search_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &recordServiceSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RecordService_SearchClient interface {
	Recv() (*RecordEntry, error)
	grpc.ClientStream
}

type recordServiceSearchClient struct {
	grpc.ClientStream
}

func (x *recordServiceSearchClient) Recv() (*RecordEntry, error) {
	m := new(RecordEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *recordServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*RecordEntry, error) {
	out := new(RecordEntry)
	err := c.cc.Invoke(ctx, RecordService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, RecordService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RecordService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RecordService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (RecordService_ScanClient, error) {
	stream, err := c.cc.NewStream(ctx, &RecordService_ServiceDesc.Streams[1], RecordService_Scan_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &recordServiceScanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RecordService_ScanClient interface {
	Recv() (*RecordEntry, error)
	grpc.ClientStream
}

type recordServiceScanClient struct {
	grpc.ClientStream
}

func (x *recordServiceScanClient) Recv() (*RecordEntry, error) {
	m := new(RecordEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *recordServiceClient) AddKeyRange(ctx context.Context, in *KeyRange, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RecordService_AddKeyRange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) GetKeyCapacity(ctx context.Context, in *TenantRequest, opts ...grpc.CallOption) (*KeyCapacity, error) {
	out := new(KeyCapacity)
	err := c.cc.Invoke(ctx, RecordService_GetKeyCapacity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) MapGet(ctx context.Context, in *MapGetRequest, opts ...grpc.CallOption) (*MapEntry, error) {
	out := new(MapEntry)
	err := c.cc.Invoke(ctx, RecordService_MapGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) MapPut(ctx context.Context, in *MapPutRequest, opts ...grpc.CallOption) (*MapValue, error) {
	out := new(MapValue)
	err := c.cc.Invoke(ctx, RecordService_MapPut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) MapRemove(ctx context.Context, in *MapRemoveRequest, opts ...grpc.CallOption) (*MapValue, error) {
	out := new(MapValue)
	err := c.cc.Invoke(ctx, RecordService_MapRemove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) MapRange(ctx context.Context, in *MapRangeRequest, opts ...grpc.CallOption) (RecordService_MapRangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RecordService_ServiceDesc.Streams[2], RecordService_MapRange_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &recordServiceMapRangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RecordService_MapRangeClient interface {
	Recv() (*MapEntry, error)
	grpc.ClientStream
}

type recordServiceMapRangeClient struct {
	grpc.ClientStream
}

func (x *recordServiceMapRangeClient) Recv() (*MapEntry, error) {
	m := new(MapEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RecordServiceServer is the server API for RecordService service.
// All implementations must embed UnimplementedRecordServiceServer
// for forward compatibility
type RecordServiceServer interface {
	//
	// Gets attributes counts
	//
	GetCounts(context.Context, *TenantRequest) (*Counts, error)
	//
	// Quick record lookup request
	//
	Lookup(context.Context, *LookupRequest) (*RecordEntry, error)
	//
	// Search records by indexed attributes
	//
	Search(*SearchRequest, RecordService_SearchServer) error
	//
	// Get record with all attributes
	//
	Get(context.Context, *GetRequest) (*RecordEntry, error)
	//
	// Create record with new primary_key
	//
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	//
	// Delete record
	//
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	//
	// Update record attributes
	//
	Update(context.Context, *UpdateRequest) (*emptypb.Empty, error)
	//
	// Scan records
	//
	Scan(*ScanRequest, RecordService_ScanServer) error
	//
	// Allocate primary key range
	//
	AddKeyRange(context.Context, *KeyRange) (*emptypb.Empty, error)
	//
	// Gets primary keys capacity
	//
	GetKeyCapacity(context.Context, *TenantRequest) (*KeyCapacity, error)
	//
	// Get map value associated with the record
	//
	MapGet(context.Context, *MapGetRequest) (*MapEntry, error)
	//
	// Put map value associated with the record. Returns old value.
	//
	MapPut(context.Context, *MapPutRequest) (*MapValue, error)
	//
	// Remove map value associated with the record. Returns old value.
	//
	MapRemove(context.Context, *MapRemoveRequest) (*MapValue, error)
	//
	// Scan all map key-value pairs
	//
	MapRange(*MapRangeRequest, RecordService_MapRangeServer) error
	mustEmbedUnimplementedRecordServiceServer()
}

// UnimplementedRecordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecordServiceServer struct {
}

func (UnimplementedRecordServiceServer) GetCounts(context.Context, *TenantRequest) (*Counts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounts not implemented")
}
func (UnimplementedRecordServiceServer) Lookup(context.Context, *LookupRequest) (*RecordEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedRecordServiceServer) Search(*SearchRequest, RecordService_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedRecordServiceServer) Get(context.Context, *GetRequest) (*RecordEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRecordServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRecordServiceServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRecordServiceServer) Update(context.Context, *UpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRecordServiceServer) Scan(*ScanRequest, RecordService_ScanServer) error {
	return status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (UnimplementedRecordServiceServer) AddKeyRange(context.Context, *KeyRange) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKeyRange not implemented")
}
func (UnimplementedRecordServiceServer) GetKeyCapacity(context.Context, *TenantRequest) (*KeyCapacity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyCapacity not implemented")
}
func (UnimplementedRecordServiceServer) MapGet(context.Context, *MapGetRequest) (*MapEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapGet not implemented")
}
func (UnimplementedRecordServiceServer) MapPut(context.Context, *MapPutRequest) (*MapValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapPut not implemented")
}
func (UnimplementedRecordServiceServer) MapRemove(context.Context, *MapRemoveRequest) (*MapValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapRemove not implemented")
}
func (UnimplementedRecordServiceServer) MapRange(*MapRangeRequest, RecordService_MapRangeServer) error {
	return status.Errorf(codes.Unimplemented, "method MapRange not implemented")
}
func (UnimplementedRecordServiceServer) mustEmbedUnimplementedRecordServiceServer() {}

// UnsafeRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordServiceServer will
// result in compilation errors.
type UnsafeRecordServiceServer interface {
	mustEmbedUnimplementedRecordServiceServer()
}

func RegisterRecordServiceServer(s grpc.ServiceRegistrar, srv RecordServiceServer) {
	s.RegisterService(&RecordService_ServiceDesc, srv)
}

func _RecordService_GetCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).GetCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordService_GetCounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).GetCounts(ctx, req.(*TenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordService_Lookup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RecordServiceServer).Search(m, &recordServiceSearchServer{stream})
}

type RecordService_SearchServer interface {
	Send(*RecordEntry) error
	grpc.ServerStream
}

type recordServiceSearchServer struct {
	grpc.ServerStream
}

func (x *recordServiceSearchServer) Send(m *RecordEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _RecordService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_Scan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RecordServiceServer).Scan(m, &recordServiceScanServer{stream})
}

type RecordService_ScanServer interface {
	Send(*RecordEntry) error
	grpc.ServerStream
}

type recordServiceScanServer struct {
	grpc.ServerStream
}

func (x *recordServiceScanServer) Send(m *RecordEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _RecordService_AddKeyRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).AddKeyRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordService_AddKeyRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).AddKeyRange(ctx, req.(*KeyRange))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_GetKeyCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).GetKeyCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordService_GetKeyCapacity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).GetKeyCapacity(ctx, req.(*TenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_MapGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).MapGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordService_MapGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).MapGet(ctx, req.(*MapGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_MapPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).MapPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordService_MapPut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).MapPut(ctx, req.(*MapPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_MapRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).MapRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordService_MapRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).MapRemove(ctx, req.(*MapRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_MapRange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MapRangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RecordServiceServer).MapRange(m, &recordServiceMapRangeServer{stream})
}

type RecordService_MapRangeServer interface {
	Send(*MapEntry) error
	grpc.ServerStream
}

type recordServiceMapRangeServer struct {
	grpc.ServerStream
}

func (x *recordServiceMapRangeServer) Send(m *MapEntry) error {
	return x.ServerStream.SendMsg(m)
}

// RecordService_ServiceDesc is the grpc.ServiceDesc for RecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "recordbase.RecordService",
	HandlerType: (*RecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCounts",
			Handler:    _RecordService_GetCounts_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _RecordService_Lookup_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RecordService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RecordService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RecordService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RecordService_Update_Handler,
		},
		{
			MethodName: "AddKeyRange",
			Handler:    _RecordService_AddKeyRange_Handler,
		},
		{
			MethodName: "GetKeyCapacity",
			Handler:    _RecordService_GetKeyCapacity_Handler,
		},
		{
			MethodName: "MapGet",
			Handler:    _RecordService_MapGet_Handler,
		},
		{
			MethodName: "MapPut",
			Handler:    _RecordService_MapPut_Handler,
		},
		{
			MethodName: "MapRemove",
			Handler:    _RecordService_MapRemove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _RecordService_Search_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Scan",
			Handler:       _RecordService_Scan_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MapRange",
			Handler:       _RecordService_MapRange_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "record_service.proto",
}
